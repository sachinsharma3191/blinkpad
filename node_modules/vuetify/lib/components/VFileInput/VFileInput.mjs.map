{"version":3,"sources":["../../../src/components/VFileInput/VFileInput.tsx"],"names":["makeVFieldProps","VChip","VCounter","VField","useLocale","useProxiedModel","computed","ref","defineComponent","humanReadableFileSize","pick","useRender","wrapInArray","name","inheritAttrs","props","chips","Boolean","counter","counterSizeString","type","String","default","counterString","multiple","prependIcon","showSize","Number","validator","v","includes","modelValue","Array","val","every","clearable","emits","files","setup","attrs","slots","t","model","internalDirty","isDirty","value","length","base","undefined","totalBytes","reduce","bytes","size","totalBytesReadable","fileNames","map","file","counterValue","fileCount","fieldRef","focus","inputRef","blur","click","hasCounter","_","restAttrs","class","e","stopPropagation","isActive","fieldClass","slotProps","disabled","target","selection","text","color","join","details"],"mappings":"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","sourcesContent":["// Styles\nimport './VFileInput.sass'\n\n// Components\nimport { makeVFieldProps } from '@/components/VField/VField'\nimport { VChip } from '@/components/VChip'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Composables\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { defineComponent, humanReadableFileSize, pick, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VFieldSlot } from '@/components/VField/VField'\n\nexport default defineComponent({\n  name: 'VFileInput',\n\n  inheritAttrs: false,\n\n  props: {\n    chips: Boolean,\n    counter: Boolean,\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize',\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter',\n    },\n    multiple: Boolean,\n    prependIcon: {\n      type: String,\n      default: '$file',\n    },\n    showSize: {\n      type: [Boolean, Number] as PropType<boolean | 1000 | 1024>,\n      default: false,\n      validator: (v: boolean | number) => {\n        return (\n          typeof v === 'boolean' ||\n          [1000, 1024].includes(v)\n        )\n      },\n    },\n    modelValue: {\n      type: Array as PropType<File[] | undefined>,\n      default: () => ([]),\n      validator: (val: any) => {\n        return wrapInArray(val).every(v => v != null && typeof v === 'object')\n      },\n    },\n\n    ...makeVFieldProps({ clearable: true }),\n  },\n\n  emits: {\n    'update:modelValue': (files: File[]) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const { t } = useLocale()\n    const model = useProxiedModel(props, 'modelValue')\n\n    const internalDirty = ref(false)\n    const isDirty = computed(() => {\n      return internalDirty.value || !!model.value?.length\n    })\n\n    const base = computed(() => typeof props.showSize !== 'boolean' ? props.showSize : undefined)\n    const totalBytes = computed(() => (model.value ?? []).reduce((bytes, { size = 0 }) => bytes + size, 0))\n    const totalBytesReadable = computed(() => humanReadableFileSize(totalBytes.value, base.value))\n\n    const fileNames = computed(() => (model.value ?? []).map(file => {\n      const { name = '', size = 0 } = file\n\n      return !props.showSize\n        ? name\n        : `${name} (${humanReadableFileSize(size, base.value)})`\n    }))\n\n    const counterValue = computed(() => {\n      const fileCount = model.value?.length ?? 0\n      if (props.showSize) return t(props.counterSizeString, fileCount, totalBytesReadable.value)\n      else return t(props.counterString, fileCount)\n    })\n\n    const fieldRef = ref<VField>()\n    function focus () {\n      fieldRef.value?.inputRef?.focus()\n    }\n    function blur () {\n      fieldRef.value?.inputRef?.blur()\n    }\n    function click () {\n      fieldRef.value?.inputRef?.click()\n    }\n\n    useRender(() => {\n      const hasCounter = (slots.counter || props.counter || counterValue.value)\n      const [_, restAttrs] = pick(attrs, ['class'])\n\n      return (\n        <VField\n          ref={ fieldRef }\n          class={[\n            'v-file-input',\n            attrs.class,\n          ]}\n          active={ isDirty.value }\n          prepend-icon={ props.prependIcon }\n          onUpdate:active={ val => internalDirty.value = val }\n          onClick:control={ click }\n          onClick:prepend={ click }\n          onClick:clear={ e => {\n            e.stopPropagation()\n\n            model.value = []\n\n            if (!fieldRef.value?.inputRef?.value) return\n\n            fieldRef.value.inputRef.value = ''\n          } }\n          { ...attrs }\n          { ...props }\n          v-slots={{\n            ...slots,\n            default: ({\n              isActive,\n              inputRef,\n              props: { class: fieldClass, ...slotProps },\n            }: VFieldSlot) => (\n              <>\n                <input\n                  ref={ inputRef }\n                  type=\"file\"\n                  disabled={ props.disabled }\n                  multiple={ props.multiple }\n                  onClick={ e => e.stopPropagation() }\n                  onChange={ e => {\n                    if (!e.target) return\n\n                    const target = e.target as HTMLInputElement\n                    const files = [...target.files ?? []]\n                    model.value = files\n\n                    if (!isActive) inputRef.value?.focus()\n                  } }\n                  { ...slotProps }\n                  { ...restAttrs }\n                />\n\n                { isDirty.value && (\n                  <div class={ fieldClass }>\n                    { slots.selection ? slots.selection({\n                      fileNames: fileNames.value,\n                      totalBytes: totalBytes.value,\n                      totalBytesReadable: totalBytesReadable.value,\n                    })\n                    : props.chips ? fileNames.value.map(text => (\n                      <VChip\n                        key={ text }\n                        size=\"small\"\n                        color={ props.color }\n                      >{ text }</VChip>\n                    ))\n                    : fileNames.value.join(', ') }\n                  </div>\n                ) }\n              </>\n            ),\n\n            details: hasCounter ? () => (\n              <>\n                <span />\n\n                <VCounter\n                  value={ counterValue.value }\n                  v-slots={ slots.counter }\n                />\n              </>\n            ) : undefined,\n          }}\n        />\n      )\n    })\n\n    return {\n      fieldRef,\n      focus,\n      blur,\n      click,\n    }\n  },\n})\n"],"file":"VFileInput.mjs"}